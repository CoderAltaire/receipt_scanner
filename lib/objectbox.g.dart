// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/discount_model.dart';
import 'model/receipt_model_4.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2933427620594457363),
      name: 'DiscountModel',
      lastPropertyId: const obx_int.IdUid(6, 7034898799722058310),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8405471642257160375),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5381269141921928804),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1015392607486784728),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6333936698856237538),
            name: 'total',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5126541905680381767),
            name: 'idd',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7034898799722058310),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2299177753179680691),
      name: 'ReceiptModel4',
      lastPropertyId: const obx_int.IdUid(38, 3890787904598143711),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2824512037597822619),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6362560166821570588),
            name: 'newid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 848291485945948061),
            name: 'cashierId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2414917835953660379),
            name: 'cashierName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9078299679015468404),
            name: 'date',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1838553909129476443),
            name: 'isRefund',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3288042607387875029),
            name: 'totalPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6840204155570063965),
            name: 'uploaded',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2286089194343789138),
            name: 'clientName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 451929914109794497),
            name: 'clientPhone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8675176778540226558),
            name: 'clientId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6271159430799963723),
            name: 'cashback',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6044101863797870910),
            name: 'sdacha',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3895636327098965805),
            name: 'returnForCheck',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 2242173903330927423),
            name: 'posName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5019145216076572879),
            name: 'zdachiToCashback',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 7904712258023511524),
            name: 'refundInfo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 5048104985777349695),
            name: 'commissionTIN',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3025574494127773640),
            name: 'hasClick',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 5218462766598678344),
            name: 'hasUzum',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 1815606351412094660),
            name: 'hasPayme',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 1899059593344643865),
            name: 'isDonate',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 4515908841893517194),
            name: 'orderId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 1964624050905365205),
            name: 'cashboxId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 5032155913055251383),
            name: 'externalId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 6508775019631062130),
            name: 'orderType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 1817977601715863945),
            name: 'shopId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 1472170885876860147),
            name: 'createdDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 5008029280601871655),
            name: 'terminalId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(31, 8636351095273869136),
            name: 'receiptSeq',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(32, 7913183169644995821),
            name: 'dateTimeOFD',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(33, 1164932834089874911),
            name: 'fiscalSign',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(34, 8519681242562174927),
            name: 'discountID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(35, 2143842994566282110),
            name: 'discountVat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(38, 3890787904598143711),
            name: 'rejected',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 6458867097844327008),
            name: 'payment',
            targetId: const obx_int.IdUid(6, 6201589260674210820)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 2005615135463007951),
            name: 'soldItemList',
            targetId: const obx_int.IdUid(7, 12877366078013456))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 6201589260674210820),
      name: 'ReceiptModelPaymentType4',
      lastPropertyId: const obx_int.IdUid(4, 125508710742390828),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5044977841502537259),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6827120876189865207),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7687196812273055872),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 125508710742390828),
            name: 'payId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 12877366078013456),
      name: 'ReceiptModelSoldItem4',
      lastPropertyId: const obx_int.IdUid(30, 7614744765521506993),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7702522448197339584),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7365338292180963502),
            name: 'cost',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1098601320974363398),
            name: 'createdTime',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1611577487036934352),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5831638610035912769),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6519408274564942688),
            name: 'productId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3521300061450537308),
            name: 'productName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7306900417505592066),
            name: 'barcode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5319911706452145365),
            name: 'sku',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4701250630227446000),
            name: 'vat',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5923332760677255829),
            name: 'vatPercent',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 5864437367361394892),
            name: 'mxik',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8172545172671176910),
            name: 'soldBy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6845802536186556855),
            name: 'isDeleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8231226607830846773),
            name: 'mxikError',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 34586916320315718),
            name: 'discountPercent',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 2424408306990960215),
            name: 'marking',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1903264484607942258),
            name: 'mark',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 5326647338938653038),
            name: 'inBox',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 7637823748068989502),
            name: 'isPriceChanged',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 6042911521776347102),
            name: 'commissionTIN',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 2564379617798612898),
            name: 'packageCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 9026718615956995016),
            name: 'packageName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(25, 5157734610487552226),
            name: 'orderId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(26, 7965649811724043331),
            name: 'sellerId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(27, 1212342125194947553),
            name: 'totalDiscountPrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(28, 4332368405865657706),
            name: 'vatName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(29, 3111809793695774045),
            name: 'tin',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(30, 7614744765521506993),
            name: 'refundItemId',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 3732781936373247201),
            name: 'discount',
            targetId: const obx_int.IdUid(2, 2933427620594457363))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(8, 3099809167327097489),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(4, 3732781936373247201),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        6271614495072471705,
        6828747829163317517,
        774359221559347181,
        3099809167327097489
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5057810305140032415,
        6125540938245374912,
        4841583775573168832,
        1254964918597986339,
        8059031743195524216,
        7531665364281009085,
        8673209012126625812,
        5055134064804646151,
        3122403834058747497,
        6414319169560311114,
        1718104274856898678,
        1842760936997868010,
        1289241037640445622,
        2644786483588262898,
        4191231072851850175,
        6419023658130568359,
        2131258065161347344,
        991544753376485315,
        5363163365833409572,
        1751602630957433061,
        6347552445916333307,
        312155299851803574,
        8127734545838707397,
        881637292880166828,
        3485246196633549659,
        8354458564408639576,
        4419967891033973405,
        3693565250010548832,
        5940380952270130003,
        5867812403079777850
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    DiscountModel: obx_int.EntityDefinition<DiscountModel>(
        model: _entities[0],
        toOneRelations: (DiscountModel object) => [],
        toManyRelations: (DiscountModel object) => {},
        getId: (DiscountModel object) => object.id,
        setId: (DiscountModel object, int id) {
          object.id = id;
        },
        objectToFB: (DiscountModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final iddOffset = fbb.writeString(object.idd);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.value);
          fbb.addFloat64(3, object.total);
          fbb.addOffset(4, iddOffset);
          fbb.addOffset(5, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final iddParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final totalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = DiscountModel(
              idd: iddParam,
              name: nameParam,
              total: totalParam,
              type: typeParam,
              value: valueParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ReceiptModel4: obx_int.EntityDefinition<ReceiptModel4>(
        model: _entities[1],
        toOneRelations: (ReceiptModel4 object) => [],
        toManyRelations: (ReceiptModel4 object) => {
              obx_int.RelInfo<ReceiptModel4>.toMany(1, object.id):
                  object.payment,
              obx_int.RelInfo<ReceiptModel4>.toMany(2, object.id):
                  object.soldItemList
            },
        getId: (ReceiptModel4 object) => object.id,
        setId: (ReceiptModel4 object, int id) {
          object.id = id;
        },
        objectToFB: (ReceiptModel4 object, fb.Builder fbb) {
          final newidOffset = fbb.writeString(object.newid);
          final cashierIdOffset = fbb.writeString(object.cashierId);
          final cashierNameOffset = fbb.writeString(object.cashierName);
          final clientNameOffset = fbb.writeString(object.clientName);
          final clientPhoneOffset = fbb.writeString(object.clientPhone);
          final clientIdOffset = fbb.writeString(object.clientId);
          final returnForCheckOffset = fbb.writeString(object.returnForCheck);
          final posNameOffset = fbb.writeString(object.posName);
          final refundInfoOffset = object.refundInfo == null
              ? null
              : fbb.writeString(object.refundInfo!);
          final commissionTINOffset = object.commissionTIN == null
              ? null
              : fbb.writeString(object.commissionTIN!);
          final orderIdOffset = fbb.writeString(object.orderId);
          final cashboxIdOffset = fbb.writeString(object.cashboxId);
          final externalIdOffset = fbb.writeString(object.externalId);
          final orderTypeOffset = fbb.writeString(object.orderType);
          final shopIdOffset = fbb.writeString(object.shopId);
          final createdDateOffset = fbb.writeString(object.createdDate);
          final terminalIdOffset = object.terminalId == null
              ? null
              : fbb.writeString(object.terminalId!);
          final fiscalSignOffset = object.fiscalSign == null
              ? null
              : fbb.writeString(object.fiscalSign!);
          final discountIDOffset = fbb.writeString(object.discountID);
          fbb.startTable(39);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, newidOffset);
          fbb.addOffset(2, cashierIdOffset);
          fbb.addOffset(3, cashierNameOffset);
          fbb.addInt64(4, object.date);
          fbb.addBool(5, object.isRefund);
          fbb.addFloat64(7, object.totalPrice);
          fbb.addBool(8, object.uploaded);
          fbb.addOffset(9, clientNameOffset);
          fbb.addOffset(10, clientPhoneOffset);
          fbb.addOffset(11, clientIdOffset);
          fbb.addInt64(12, object.cashback);
          fbb.addFloat64(13, object.sdacha);
          fbb.addOffset(14, returnForCheckOffset);
          fbb.addOffset(15, posNameOffset);
          fbb.addFloat64(16, object.zdachiToCashback);
          fbb.addOffset(17, refundInfoOffset);
          fbb.addOffset(18, commissionTINOffset);
          fbb.addBool(19, object.hasClick);
          fbb.addBool(20, object.hasUzum);
          fbb.addBool(21, object.hasPayme);
          fbb.addBool(22, object.isDonate);
          fbb.addOffset(23, orderIdOffset);
          fbb.addOffset(24, cashboxIdOffset);
          fbb.addOffset(25, externalIdOffset);
          fbb.addOffset(26, orderTypeOffset);
          fbb.addOffset(27, shopIdOffset);
          fbb.addOffset(28, createdDateOffset);
          fbb.addOffset(29, terminalIdOffset);
          fbb.addInt64(30, object.receiptSeq);
          fbb.addInt64(31, object.dateTimeOFD);
          fbb.addOffset(32, fiscalSignOffset);
          fbb.addOffset(33, discountIDOffset);
          fbb.addFloat64(34, object.discountVat);
          fbb.addBool(37, object.rejected);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdDateParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 60, '');
          final orderIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 50, '');
          final cashboxIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 52, '');
          final externalIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 54, '');
          final orderTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 56, '');
          final shopIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 58, '');
          final discountVatParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 72, 0);
          final discountIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 70, '');
          final terminalIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 62);
          final receiptSeqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 64);
          final dateTimeOFDParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 66);
          final fiscalSignParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 68);
          final zdachiToCashbackParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 36);
          final newidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final cashierIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final cashierNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final dateParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final isRefundParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final totalPriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final uploadedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final rejectedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 78, false);
          final clientNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final clientPhoneParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final clientIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final cashbackParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final sdachaParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final returnForCheckParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 32, '');
          final posNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 34, '');
          final refundInfoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final commissionTINParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 40);
          final hasClickParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 42, false);
          final hasUzumParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 44, false);
          final hasPaymeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 46, false);
          final isDonateParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 48);
          final object = ReceiptModel4(
              createdDate: createdDateParam,
              orderId: orderIdParam,
              cashboxId: cashboxIdParam,
              externalId: externalIdParam,
              orderType: orderTypeParam,
              shopId: shopIdParam,
              discountVat: discountVatParam,
              discountID: discountIDParam,
              terminalId: terminalIdParam,
              receiptSeq: receiptSeqParam,
              dateTimeOFD: dateTimeOFDParam,
              fiscalSign: fiscalSignParam,
              zdachiToCashback: zdachiToCashbackParam,
              newid: newidParam,
              cashierId: cashierIdParam,
              cashierName: cashierNameParam,
              date: dateParam,
              isRefund: isRefundParam,
              totalPrice: totalPriceParam,
              uploaded: uploadedParam,
              rejected: rejectedParam,
              clientName: clientNameParam,
              clientPhone: clientPhoneParam,
              clientId: clientIdParam,
              cashback: cashbackParam,
              sdacha: sdachaParam,
              returnForCheck: returnForCheckParam,
              posName: posNameParam,
              refundInfo: refundInfoParam,
              commissionTIN: commissionTINParam,
              hasClick: hasClickParam,
              hasUzum: hasUzumParam,
              hasPayme: hasPaymeParam,
              isDonate: isDonateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<ReceiptModel4>(object.payment,
              store, obx_int.RelInfo<ReceiptModel4>.toMany(1, object.id));
          obx_int.InternalToManyAccess.setRelInfo<ReceiptModel4>(
              object.soldItemList,
              store,
              obx_int.RelInfo<ReceiptModel4>.toMany(2, object.id));
          return object;
        }),
    ReceiptModelPaymentType4:
        obx_int.EntityDefinition<ReceiptModelPaymentType4>(
            model: _entities[2],
            toOneRelations: (ReceiptModelPaymentType4 object) => [],
            toManyRelations: (ReceiptModelPaymentType4 object) => {},
            getId: (ReceiptModelPaymentType4 object) => object.id,
            setId: (ReceiptModelPaymentType4 object, int id) {
              object.id = id;
            },
            objectToFB: (ReceiptModelPaymentType4 object, fb.Builder fbb) {
              final nameOffset = fbb.writeString(object.name);
              final payIdOffset = fbb.writeString(object.payId);
              fbb.startTable(5);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, nameOffset);
              fbb.addFloat64(2, object.value);
              fbb.addOffset(3, payIdOffset);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final nameParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
              final payIdParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
              final valueParam =
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
              final object = ReceiptModelPaymentType4(
                  name: nameParam, payId: payIdParam, value: valueParam)
                ..id =
                    const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

              return object;
            }),
    ReceiptModelSoldItem4: obx_int.EntityDefinition<ReceiptModelSoldItem4>(
        model: _entities[3],
        toOneRelations: (ReceiptModelSoldItem4 object) => [],
        toManyRelations: (ReceiptModelSoldItem4 object) => {
              obx_int.RelInfo<ReceiptModelSoldItem4>.toMany(4, object.id):
                  object.discount
            },
        getId: (ReceiptModelSoldItem4 object) => object.id,
        setId: (ReceiptModelSoldItem4 object, int id) {
          object.id = id;
        },
        objectToFB: (ReceiptModelSoldItem4 object, fb.Builder fbb) {
          final productIdOffset = fbb.writeString(object.productId);
          final productNameOffset = fbb.writeString(object.productName);
          final barcodeOffset = fbb.writeString(object.barcode);
          final mxikOffset = fbb.writeString(object.mxik);
          final soldByOffset = fbb.writeString(object.soldBy);
          final markOffset =
              object.mark == null ? null : fbb.writeString(object.mark!);
          final commissionTINOffset = object.commissionTIN == null
              ? null
              : fbb.writeString(object.commissionTIN!);
          final packageCodeOffset = object.packageCode == null
              ? null
              : fbb.writeString(object.packageCode!);
          final packageNameOffset = object.packageName == null
              ? null
              : fbb.writeString(object.packageName!);
          final orderIdOffset = fbb.writeString(object.orderId);
          final sellerIdOffset = fbb.writeString(object.sellerId);
          final vatNameOffset = fbb.writeString(object.vatName);
          final tinOffset =
              object.tin == null ? null : fbb.writeString(object.tin!);
          final refundItemIdOffset = object.refundItemId == null
              ? null
              : fbb.writeString(object.refundItemId!);
          fbb.startTable(31);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.cost);
          fbb.addInt64(2, object.createdTime);
          fbb.addFloat64(3, object.price);
          fbb.addFloat64(4, object.value);
          fbb.addOffset(5, productIdOffset);
          fbb.addOffset(6, productNameOffset);
          fbb.addOffset(7, barcodeOffset);
          fbb.addInt64(8, object.sku);
          fbb.addFloat64(9, object.vat);
          fbb.addFloat64(10, object.vatPercent);
          fbb.addOffset(11, mxikOffset);
          fbb.addOffset(12, soldByOffset);
          fbb.addBool(13, object.isDeleted);
          fbb.addBool(14, object.mxikError);
          fbb.addFloat64(15, object.discountPercent);
          fbb.addBool(16, object.marking);
          fbb.addOffset(17, markOffset);
          fbb.addInt64(19, object.inBox);
          fbb.addBool(20, object.isPriceChanged);
          fbb.addOffset(21, commissionTINOffset);
          fbb.addOffset(22, packageCodeOffset);
          fbb.addOffset(23, packageNameOffset);
          fbb.addOffset(24, orderIdOffset);
          fbb.addOffset(25, sellerIdOffset);
          fbb.addFloat64(26, object.totalDiscountPrice);
          fbb.addOffset(27, vatNameOffset);
          fbb.addOffset(28, tinOffset);
          fbb.addOffset(29, refundItemIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final inBoxParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          final isDeletedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30);
          final commissionTINParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 46);
          final tinParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 60);
          final mxikErrorParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final sellerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 54, '');
          final soldByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final totalDiscountPriceParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 56);
          final costParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final vatNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 58, '');
          final createdTimeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final productIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final productNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final markParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 38);
          final refundItemIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 62);
          final markingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 36, false);
          final barcodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final skuParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final vatPercentParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final vatParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final mxikParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final discountPercentParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 34);
          final isPriceChangedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 44, false);
          final packageCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 48);
          final packageNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 50);
          final object = ReceiptModelSoldItem4(
              inBox: inBoxParam,
              isDeleted: isDeletedParam,
              commissionTIN: commissionTINParam,
              tin: tinParam,
              mxikError: mxikErrorParam,
              sellerId: sellerIdParam,
              soldBy: soldByParam,
              totalDiscountPrice: totalDiscountPriceParam,
              cost: costParam,
              vatName: vatNameParam,
              createdTime: createdTimeParam,
              price: priceParam,
              value: valueParam,
              productId: productIdParam,
              productName: productNameParam,
              mark: markParam,
              refundItemId: refundItemIdParam,
              marking: markingParam,
              barcode: barcodeParam,
              sku: skuParam,
              vatPercent: vatPercentParam,
              vat: vatParam,
              mxik: mxikParam,
              discountPercent: discountPercentParam,
              isPriceChanged: isPriceChangedParam,
              packageCode: packageCodeParam,
              packageName: packageNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..orderId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 52, '');
          obx_int.InternalToManyAccess.setRelInfo<ReceiptModelSoldItem4>(
              object.discount,
              store,
              obx_int.RelInfo<ReceiptModelSoldItem4>.toMany(4, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DiscountModel] entity fields to define ObjectBox queries.
class DiscountModel_ {
  /// see [DiscountModel.id]
  static final id =
      obx.QueryIntegerProperty<DiscountModel>(_entities[0].properties[0]);

  /// see [DiscountModel.name]
  static final name =
      obx.QueryStringProperty<DiscountModel>(_entities[0].properties[1]);

  /// see [DiscountModel.value]
  static final value =
      obx.QueryDoubleProperty<DiscountModel>(_entities[0].properties[2]);

  /// see [DiscountModel.total]
  static final total =
      obx.QueryDoubleProperty<DiscountModel>(_entities[0].properties[3]);

  /// see [DiscountModel.idd]
  static final idd =
      obx.QueryStringProperty<DiscountModel>(_entities[0].properties[4]);

  /// see [DiscountModel.type]
  static final type =
      obx.QueryStringProperty<DiscountModel>(_entities[0].properties[5]);
}

/// [ReceiptModel4] entity fields to define ObjectBox queries.
class ReceiptModel4_ {
  /// see [ReceiptModel4.id]
  static final id =
      obx.QueryIntegerProperty<ReceiptModel4>(_entities[1].properties[0]);

  /// see [ReceiptModel4.newid]
  static final newid =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[1]);

  /// see [ReceiptModel4.cashierId]
  static final cashierId =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[2]);

  /// see [ReceiptModel4.cashierName]
  static final cashierName =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[3]);

  /// see [ReceiptModel4.date]
  static final date =
      obx.QueryIntegerProperty<ReceiptModel4>(_entities[1].properties[4]);

  /// see [ReceiptModel4.isRefund]
  static final isRefund =
      obx.QueryBooleanProperty<ReceiptModel4>(_entities[1].properties[5]);

  /// see [ReceiptModel4.totalPrice]
  static final totalPrice =
      obx.QueryDoubleProperty<ReceiptModel4>(_entities[1].properties[6]);

  /// see [ReceiptModel4.uploaded]
  static final uploaded =
      obx.QueryBooleanProperty<ReceiptModel4>(_entities[1].properties[7]);

  /// see [ReceiptModel4.clientName]
  static final clientName =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[8]);

  /// see [ReceiptModel4.clientPhone]
  static final clientPhone =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[9]);

  /// see [ReceiptModel4.clientId]
  static final clientId =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[10]);

  /// see [ReceiptModel4.cashback]
  static final cashback =
      obx.QueryIntegerProperty<ReceiptModel4>(_entities[1].properties[11]);

  /// see [ReceiptModel4.sdacha]
  static final sdacha =
      obx.QueryDoubleProperty<ReceiptModel4>(_entities[1].properties[12]);

  /// see [ReceiptModel4.returnForCheck]
  static final returnForCheck =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[13]);

  /// see [ReceiptModel4.posName]
  static final posName =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[14]);

  /// see [ReceiptModel4.zdachiToCashback]
  static final zdachiToCashback =
      obx.QueryDoubleProperty<ReceiptModel4>(_entities[1].properties[15]);

  /// see [ReceiptModel4.refundInfo]
  static final refundInfo =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[16]);

  /// see [ReceiptModel4.commissionTIN]
  static final commissionTIN =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[17]);

  /// see [ReceiptModel4.hasClick]
  static final hasClick =
      obx.QueryBooleanProperty<ReceiptModel4>(_entities[1].properties[18]);

  /// see [ReceiptModel4.hasUzum]
  static final hasUzum =
      obx.QueryBooleanProperty<ReceiptModel4>(_entities[1].properties[19]);

  /// see [ReceiptModel4.hasPayme]
  static final hasPayme =
      obx.QueryBooleanProperty<ReceiptModel4>(_entities[1].properties[20]);

  /// see [ReceiptModel4.isDonate]
  static final isDonate =
      obx.QueryBooleanProperty<ReceiptModel4>(_entities[1].properties[21]);

  /// see [ReceiptModel4.orderId]
  static final orderId =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[22]);

  /// see [ReceiptModel4.cashboxId]
  static final cashboxId =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[23]);

  /// see [ReceiptModel4.externalId]
  static final externalId =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[24]);

  /// see [ReceiptModel4.orderType]
  static final orderType =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[25]);

  /// see [ReceiptModel4.shopId]
  static final shopId =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[26]);

  /// see [ReceiptModel4.createdDate]
  static final createdDate =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[27]);

  /// see [ReceiptModel4.terminalId]
  static final terminalId =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[28]);

  /// see [ReceiptModel4.receiptSeq]
  static final receiptSeq =
      obx.QueryIntegerProperty<ReceiptModel4>(_entities[1].properties[29]);

  /// see [ReceiptModel4.dateTimeOFD]
  static final dateTimeOFD =
      obx.QueryIntegerProperty<ReceiptModel4>(_entities[1].properties[30]);

  /// see [ReceiptModel4.fiscalSign]
  static final fiscalSign =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[31]);

  /// see [ReceiptModel4.discountID]
  static final discountID =
      obx.QueryStringProperty<ReceiptModel4>(_entities[1].properties[32]);

  /// see [ReceiptModel4.discountVat]
  static final discountVat =
      obx.QueryDoubleProperty<ReceiptModel4>(_entities[1].properties[33]);

  /// see [ReceiptModel4.rejected]
  static final rejected =
      obx.QueryBooleanProperty<ReceiptModel4>(_entities[1].properties[34]);

  /// see [ReceiptModel4.payment]
  static final payment =
      obx.QueryRelationToMany<ReceiptModel4, ReceiptModelPaymentType4>(
          _entities[1].relations[0]);

  /// see [ReceiptModel4.soldItemList]
  static final soldItemList =
      obx.QueryRelationToMany<ReceiptModel4, ReceiptModelSoldItem4>(
          _entities[1].relations[1]);
}

/// [ReceiptModelPaymentType4] entity fields to define ObjectBox queries.
class ReceiptModelPaymentType4_ {
  /// see [ReceiptModelPaymentType4.id]
  static final id = obx.QueryIntegerProperty<ReceiptModelPaymentType4>(
      _entities[2].properties[0]);

  /// see [ReceiptModelPaymentType4.name]
  static final name = obx.QueryStringProperty<ReceiptModelPaymentType4>(
      _entities[2].properties[1]);

  /// see [ReceiptModelPaymentType4.value]
  static final value = obx.QueryDoubleProperty<ReceiptModelPaymentType4>(
      _entities[2].properties[2]);

  /// see [ReceiptModelPaymentType4.payId]
  static final payId = obx.QueryStringProperty<ReceiptModelPaymentType4>(
      _entities[2].properties[3]);
}

/// [ReceiptModelSoldItem4] entity fields to define ObjectBox queries.
class ReceiptModelSoldItem4_ {
  /// see [ReceiptModelSoldItem4.id]
  static final id = obx.QueryIntegerProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[0]);

  /// see [ReceiptModelSoldItem4.cost]
  static final cost = obx.QueryDoubleProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[1]);

  /// see [ReceiptModelSoldItem4.createdTime]
  static final createdTime = obx.QueryIntegerProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[2]);

  /// see [ReceiptModelSoldItem4.price]
  static final price = obx.QueryDoubleProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[3]);

  /// see [ReceiptModelSoldItem4.value]
  static final value = obx.QueryDoubleProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[4]);

  /// see [ReceiptModelSoldItem4.productId]
  static final productId = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[5]);

  /// see [ReceiptModelSoldItem4.productName]
  static final productName = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[6]);

  /// see [ReceiptModelSoldItem4.barcode]
  static final barcode = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[7]);

  /// see [ReceiptModelSoldItem4.sku]
  static final sku = obx.QueryIntegerProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[8]);

  /// see [ReceiptModelSoldItem4.vat]
  static final vat = obx.QueryDoubleProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[9]);

  /// see [ReceiptModelSoldItem4.vatPercent]
  static final vatPercent = obx.QueryDoubleProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[10]);

  /// see [ReceiptModelSoldItem4.mxik]
  static final mxik = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[11]);

  /// see [ReceiptModelSoldItem4.soldBy]
  static final soldBy = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[12]);

  /// see [ReceiptModelSoldItem4.isDeleted]
  static final isDeleted = obx.QueryBooleanProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[13]);

  /// see [ReceiptModelSoldItem4.mxikError]
  static final mxikError = obx.QueryBooleanProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[14]);

  /// see [ReceiptModelSoldItem4.discountPercent]
  static final discountPercent = obx.QueryDoubleProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[15]);

  /// see [ReceiptModelSoldItem4.marking]
  static final marking = obx.QueryBooleanProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[16]);

  /// see [ReceiptModelSoldItem4.mark]
  static final mark = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[17]);

  /// see [ReceiptModelSoldItem4.inBox]
  static final inBox = obx.QueryIntegerProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[18]);

  /// see [ReceiptModelSoldItem4.isPriceChanged]
  static final isPriceChanged = obx.QueryBooleanProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[19]);

  /// see [ReceiptModelSoldItem4.commissionTIN]
  static final commissionTIN = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[20]);

  /// see [ReceiptModelSoldItem4.packageCode]
  static final packageCode = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[21]);

  /// see [ReceiptModelSoldItem4.packageName]
  static final packageName = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[22]);

  /// see [ReceiptModelSoldItem4.orderId]
  static final orderId = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[23]);

  /// see [ReceiptModelSoldItem4.sellerId]
  static final sellerId = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[24]);

  /// see [ReceiptModelSoldItem4.totalDiscountPrice]
  static final totalDiscountPrice =
      obx.QueryDoubleProperty<ReceiptModelSoldItem4>(
          _entities[3].properties[25]);

  /// see [ReceiptModelSoldItem4.vatName]
  static final vatName = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[26]);

  /// see [ReceiptModelSoldItem4.tin]
  static final tin = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[27]);

  /// see [ReceiptModelSoldItem4.refundItemId]
  static final refundItemId = obx.QueryStringProperty<ReceiptModelSoldItem4>(
      _entities[3].properties[28]);

  /// see [ReceiptModelSoldItem4.discount]
  static final discount =
      obx.QueryRelationToMany<ReceiptModelSoldItem4, DiscountModel>(
          _entities[3].relations[0]);
}
